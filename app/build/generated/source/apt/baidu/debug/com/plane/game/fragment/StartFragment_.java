//
// DO NOT EDIT THIS FILE.
// Generated using AndroidAnnotations 4.4.0.
// 
// You can create a larger work that contains this file and distribute that work under terms of your choice.
//

package com.plane.game.fragment;

import android.os.Bundle;
import android.view.LayoutInflater;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import com.plane.game.R;
import org.androidannotations.api.builder.FragmentBuilder;
import org.androidannotations.api.view.HasViews;
import org.androidannotations.api.view.OnViewChangedListener;
import org.androidannotations.api.view.OnViewChangedNotifier;

public final class StartFragment_
    extends com.plane.game.fragment.StartFragment
    implements HasViews, OnViewChangedListener
{
    private final OnViewChangedNotifier onViewChangedNotifier_ = new OnViewChangedNotifier();
    private View contentView_;
    public final static String GAME_STATUS_ARG = "gameStatus";
    public final static String GAME_POINT_ARG = "gamePoint";

    @Override
    public void onCreate(Bundle savedInstanceState) {
        OnViewChangedNotifier previousNotifier = OnViewChangedNotifier.replaceNotifier(onViewChangedNotifier_);
        init_(savedInstanceState);
        super.onCreate(savedInstanceState);
        OnViewChangedNotifier.replaceNotifier(previousNotifier);
    }

    @Override
    public<T extends View> T internalFindViewById(int id) {
        return ((T)((contentView_ == null)?null:contentView_.findViewById(id)));
    }

    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
        contentView_ = super.onCreateView(inflater, container, savedInstanceState);
        if (contentView_ == null) {
            contentView_ = inflater.inflate(R.layout.start_fragment, container, false);
        }
        return contentView_;
    }

    @Override
    public void onDestroyView() {
        super.onDestroyView();
        contentView_ = null;
        btn_start = null;
        btn_get_coin = null;
        btn_share = null;
        btn_help = null;
        btn_feedback = null;
        btn_resume = null;
        btn_rank = null;
        btn_submit = null;
        tv_point = null;
    }

    private void init_(Bundle savedInstanceState) {
        OnViewChangedNotifier.registerOnViewChangedListener(this);
        injectFragmentArguments_();
    }

    @Override
    public void onViewCreated(View view, Bundle savedInstanceState) {
        super.onViewCreated(view, savedInstanceState);
        onViewChangedNotifier_.notifyViewChanged(this);
    }

    public static StartFragment_.FragmentBuilder_ builder() {
        return new StartFragment_.FragmentBuilder_();
    }

    @Override
    public void onViewChanged(HasViews hasViews) {
        this.btn_start = hasViews.internalFindViewById(R.id.btn_start);
        this.btn_get_coin = hasViews.internalFindViewById(R.id.btn_get_coin);
        this.btn_share = hasViews.internalFindViewById(R.id.btn_share);
        this.btn_help = hasViews.internalFindViewById(R.id.btn_help);
        this.btn_feedback = hasViews.internalFindViewById(R.id.btn_feedback);
        this.btn_resume = hasViews.internalFindViewById(R.id.btn_resume);
        this.btn_rank = hasViews.internalFindViewById(R.id.btn_rank);
        this.btn_submit = hasViews.internalFindViewById(R.id.btn_submit);
        this.tv_point = hasViews.internalFindViewById(R.id.tv_point);
        View view_rl_point = hasViews.internalFindViewById(R.id.rl_point);
        View view_btn_exit = hasViews.internalFindViewById(R.id.btn_exit);

        if (this.btn_start!= null) {
            this.btn_start.setOnClickListener(new OnClickListener() {

                @Override
                public void onClick(View view) {
                    StartFragment_.this.btn_start();
                }
            }
            );
        }
        if (this.btn_resume!= null) {
            this.btn_resume.setOnClickListener(new OnClickListener() {

                @Override
                public void onClick(View view) {
                    StartFragment_.this.btn_resume();
                }
            }
            );
        }
        if (this.btn_rank!= null) {
            this.btn_rank.setOnClickListener(new OnClickListener() {

                @Override
                public void onClick(View view) {
                    StartFragment_.this.btn_rank();
                }
            }
            );
        }
        if (this.btn_get_coin!= null) {
            this.btn_get_coin.setOnClickListener(new OnClickListener() {

                @Override
                public void onClick(View view) {
                    StartFragment_.this.btn_get_coin();
                }
            }
            );
        }
        if (view_rl_point!= null) {
            view_rl_point.setOnClickListener(new OnClickListener() {

                @Override
                public void onClick(View view) {
                    StartFragment_.this.btn_get_coin();
                }
            }
            );
        }
        if (this.btn_share!= null) {
            this.btn_share.setOnClickListener(new OnClickListener() {

                @Override
                public void onClick(View view) {
                    StartFragment_.this.btn_share();
                }
            }
            );
        }
        if (this.btn_help!= null) {
            this.btn_help.setOnClickListener(new OnClickListener() {

                @Override
                public void onClick(View view) {
                    StartFragment_.this.btn_help();
                }
            }
            );
        }
        if (this.btn_feedback!= null) {
            this.btn_feedback.setOnClickListener(new OnClickListener() {

                @Override
                public void onClick(View view) {
                    StartFragment_.this.btn_feedback();
                }
            }
            );
        }
        if (view_btn_exit!= null) {
            view_btn_exit.setOnClickListener(new OnClickListener() {

                @Override
                public void onClick(View view) {
                    StartFragment_.this.btn_exit();
                }
            }
            );
        }
        if (this.btn_submit!= null) {
            this.btn_submit.setOnClickListener(new OnClickListener() {

                @Override
                public void onClick(View view) {
                    StartFragment_.this.btn_submit();
                }
            }
            );
        }
        afterView();
    }

    private void injectFragmentArguments_() {
        Bundle args_ = getArguments();
        if (args_!= null) {
            if (args_.containsKey(GAME_STATUS_ARG)) {
                this.gameStatus = args_.getInt(GAME_STATUS_ARG);
            }
            if (args_.containsKey(GAME_POINT_ARG)) {
                this.gamePoint = args_.getInt(GAME_POINT_ARG);
            }
        }
    }

    public static class FragmentBuilder_
        extends FragmentBuilder<StartFragment_.FragmentBuilder_, com.plane.game.fragment.StartFragment>
    {

        @Override
        public com.plane.game.fragment.StartFragment build() {
            StartFragment_ fragment_ = new StartFragment_();
            fragment_.setArguments(args);
            return fragment_;
        }

        /**
         * @param gameStatus
         *     value for this Fragment argument
         * @return
         *     the FragmentBuilder to chain calls
         */
        public StartFragment_.FragmentBuilder_ gameStatus(int gameStatus) {
            args.putInt(GAME_STATUS_ARG, gameStatus);
            return this;
        }

        /**
         * @param gamePoint
         *     value for this Fragment argument
         * @return
         *     the FragmentBuilder to chain calls
         */
        public StartFragment_.FragmentBuilder_ gamePoint(int gamePoint) {
            args.putInt(GAME_POINT_ARG, gamePoint);
            return this;
        }
    }
}
